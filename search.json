[{"path":[]},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement katarzyna.markowska@amu.edu.pl. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://popecol.github.io/rangr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rangr","title":"Contributing to rangr","text":"outlines propose change rangr. Note package initially stable state development, great deal active subsequent development envisioned.","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rangr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd comment first line code.","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to rangr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to rangr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"popecol/rangr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number.","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to rangr","text":"New code follow rOpenSci style suggestions. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://popecol.github.io/rangr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rangr","text":"Please note rangr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://popecol.github.io/rangr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Katarzyna Markowska; Lechosław Kuczyński Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"about-rangr","dir":"Articles","previous_headings":"","what":"About rangr","title":"How to use rangr?","text":"vignette shows example basic use rangr package. main goal tool simulate species range dynamics. simulations can performed spatially explicit dynamic environment, allowing projections populations respond e.g. climate land use changes. Additionally, implementing various sampling methods observational error distributions, can accurately reflect structure original survey data simulate random sampling. , showcase full capabilities package, creating virtual species performing simulation visualization results.","code":""},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic workflow","title":"How to use rangr?","text":"chapter show perform basic simulation using maps provided package.","code":""},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"installing-the-package","dir":"Articles","previous_headings":"Basic workflow","what":"Installing the package","title":"How to use rangr?","text":"First need install load rangr package. Since maps simulation takes place SpatRaster format, also install load terra package facilitate manipulation visualisation.","code":"devtools::install_github(\"popecol/rangr\") library(rangr) install.packages(\"terra\") library(terra)"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"input-maps","dir":"Articles","previous_headings":"Basic workflow","what":"Input maps","title":"How to use rangr?","text":"One important input parameters simulation maps specifying abundance virtual species starting point simulation carrying capacity environment simulation takes place. section, generate scratch. Instead, use maps provided package. Example maps available rangr: n1_small.tif n1_big.tif K_small.tif K_small_changing.tif K_big.tif Note input maps must Cartesian coordinate system. can find additional information data sets help files: use two datasets right now: n1_small.tif - abundance starting point, K_small.tif - carrying capacity. read data can use rast function terra package: Since maps refer virtual case real environment (small region located northwestern Poland), must dimensions, resolution, geographical projection etc. differences may values contain number layers. can use multiple layers carrying capacity map create dynamic environment simulation, example, demonstrate static environment. Let’s take closer look : , can see dimensions basic characteristics sample maps. field differs maps value field. Now use plot function visualise input maps get even better idea ’re working . Input maps Several things noticeable : shape maps, cases, upper left corner map excluded simulation area treated outside map’s extent. create irregular shape, NA must assigned particular cell group cells. initial population located lower right corner simulation area occupies two cells. contains 10 individuals (can use values() function check). carrying capacity map areas unsuitable presented virtual species, well areas can positive population growth rate.","code":"?n1_small.tif ?K_small.tif n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <-  rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\")) n1_small #> class       : SpatRaster  #> dimensions  : 15, 10, 1  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source      : n1_small.tif  #> name        : layer  #> min value   :     0  #> max value   :    10 K_small #> class       : SpatRaster  #> dimensions  : 15, 10, 1  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source      : K_small.tif  #> name        : layer  #> min value   :     0  #> max value   :   100 plot(c(n1_small, K_small))"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"initialise","dir":"Articles","previous_headings":"Basic workflow","what":"Initialise","title":"How to use rangr?","text":"Now input maps, use initialise() function set input parameters generate sim_data object contain necessary information perform simulation. basic initialise() call look follows: Let’s break command: n1_map K_map refer input maps described earlier. r parameter used set intrinsic population growth rate. default population growth function Gompetz function. rate parameter related kernel_fun parameter, default set exponential function (rexp). Therefore, rate determines shape dispersal kernel (mean dispersal distance 1/rate). now set simulation environment along demographic dispersal processes. basic setup needed run first simulation, ’s ’ll next step. first, let’s see information sim_data contains happened behind scenes initialisation. First, let’s check class sim_data object: can see sim_data sim_data object inherits list objects possible change values object hand. However, strongly encourage use update() function instead avoid errors problems data integration. take closer look sim_data can also use print() summary() function: show summary input maps, well list important parameters r set earlier.","code":"sim_data_01 <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) class(sim_data_01) #> [1] \"sim_data\" \"list\" summary(sim_data_01) #> Summary of sim_data object #>  #> n1 map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> Carrying capacity map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   56.00   44.84   72.00  100.00      12  #>                                #> growth                gompertz #> r            0.693147180559945 #> A                            - #> kernel_fun                rexp #> dens_dep                   K2N #> border               absorbing #> max_dist                  2000 #> changing_env             FALSE #> dlist                     TRUE"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"simulation","dir":"Articles","previous_headings":"Basic workflow","what":"Simulation","title":"How to use rangr?","text":"need run simulation sim_data object specified number time steps simulate. addition, can use burn parameter discard selected number initial time steps makes sense research experiment. first example, set time parameter want observe virtual species disperses reproduces. check class returned object: Similar initialise, sim also returns object inherits list, case called sim_results. list 3 elements : extinction - TRUE population extinct FALSE otherwise simulated_time - number simulated time steps without burn-N_map - 3-dimensional array representing spatiotemporal variability population numbers. first two dimensions correspond spatial aspect output third dimension represents time. best way take closer look results call summary function.  gives quick easy overview simulation results providing simulation time, extinction status summary maps abundances. also produces plot can useful determining value burn parameter.","code":"sim_result_01 <- sim(obj = sim_data_01, time = 100) class(sim_result_01) #> [1] \"sim_results\" \"list\" summary(sim_result_01) #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time   100 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   12.00   10.45   19.00   54.00    1200"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"visualisation","dir":"Articles","previous_headings":"Basic workflow","what":"Visualisation","title":"How to use rangr?","text":"rangr provided easy way visualise selected time steps simulation. can done using generic plot function: Abundances can also adjust parameters get breaks color scale: Abundances prefer work rasters, can also convert sim_result object SpatRaster using to_rast() function: visualise using plot() function: Abundances","code":"plot(sim_result_01,   time_points = c(1, 10, 25, 50),   template = sim_data_01$K_map ) #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_10, t_25, t_50  #> min values  :   0,    0,    0,    0  #> max values  :  10,   19,   27,   36 plot(sim_result_01,   time_points = c(1, 10, 25, 50),   breaks = seq(0, max(sim_result_01$N_map + 5, na.rm = TRUE), by = 5),   template = sim_data_01$K_map ) #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_10, t_25, t_50  #> min values  :   0,    0,    0,    0  #> max values  :  10,   19,   27,   36 # raster construction my_rast <- to_rast(   sim_result_01,   time_points = 1:sim_result_01$simulated_time,   template = sim_data_01$K_map )  # print raster print(my_rast) #> class       : SpatRaster  #> dimensions  : 15, 10, 100  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_2, t_3, t_4, t_5, t_6, ...  #> min values  :   0,   0,   0,   0,   0,   0, ...  #> max values  :  10,  11,  14,  16,  20,  13, ... # plot selected time points plot(my_rast, c(1, 10, 25, 50))"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"virtual-ecologist","dir":"Articles","previous_headings":"Basic workflow","what":"Virtual Ecologist","title":"How to use rangr?","text":"want sample abundance virtual species population mimic observation process, can use get_observations() function. Depending type argument, observation sites can selected randomly coordinates can provided data.frame. demonstrate basic variant get_observations() function. need sim_results object sim_data object used generate simulated data. randomly select observation sites, variant need specify proportion sites want make observations . select 10% sites, prop argument set 0.1. two random observation processes available: one observation sites time steps, observation sites different time step. see first version works, set type argument \"random_one_layer\". returned data.frame contains geodetic coordinates survey sites, population abundances, time steps abundances observed. confirm survey sites remain time step, obtain coordinates sites, can use following code: sampled 15 sites. observation process perfect due , among things, detectability species skill observer. mimic , need set obs_error obs_error_param arguments, set level random noise observation process generated log-normal distribution binomial distribution. use first one. Now let’s demonstrate second random observation process. set type argument \"random_all_layers\". version ensures study sites re-sampled time step. Let’s look observation sites sampled time. looked 138 observed sites (available), “visited” least .","code":"set.seed(123) sample_01 <- get_observations(    sim_data_01,    sim_result_01,    type = \"random_one_layer\",    prop = 0.1 ) str(sample_01) #> 'data.frame':    1500 obs. of  4 variables: #>  $ x        : num  279500 271500 279500 274500 279500 ... #>  $ y        : num  623500 618500 612500 619500 610500 ... #>  $ time_step: int  1 1 1 1 1 1 1 1 1 1 ... #>  $ value    : num  0 0 0 0 10 0 0 0 0 0 ... unique(sample_01[c(\"x\", \"y\")]) #>         x      y #> 1  279500 623500 #> 2  271500 618500 #> 3  279500 612500 #> 4  274500 619500 #> 5  279500 610500 #> 6  277500 610500 #> 7  271500 614500 #> 8  272500 614500 #> 9  272500 610500 #> 10 273500 614500 #> 11 272500 611500 #> 12 274500 623500 #> 13 274500 614500 #> 14 270500 613500 #> 15 273500 616500 sample_01 <- get_observations(    sim_data_01,    sim_result_01,    type = \"random_one_layer\",    prop = 0.1,    obs_error = \"rlnorm\",    obs_error_param = log(1.2) ) set.seed(123) sample_02 <- get_observations(    sim_data_01,    sim_result_01,    type = \"random_all_layer\",    prop = 0.1,    obs_error = \"rlnorm\",    obs_error_param = log(1.2) ) coords_02 <- unique(sample_02[c(\"x\", \"y\")]) nrow(coords_02) #> [1] 138"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"more-advanced-workflow","dir":"Articles","previous_headings":"","what":"More advanced workflow","title":"How to use rangr?","text":"previous workflow quite basic. Now present advanced one use show parameter options.","code":""},{"path":[]},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"abundances-at-the-first-time-step","dir":"Articles","previous_headings":"More advanced workflow > Input maps","what":"Abundances at the first time step","title":"How to use rangr?","text":"mentioned earlier, rangr ability simulate virtual species changing environment, example show . better illustration start populated map n1_small used . easiest way use abundances last time step previous simulation input current one. can done follows:","code":"n1_small_02 <- n1_small values(n1_small_02) <- (sim_result_01$N_map[, , 100])"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"carrying-capacity","dir":"Articles","previous_headings":"More advanced workflow > Input maps","what":"Carrying capacity","title":"How to use rangr?","text":"simulate changing environment, need specify changes want. Essentially need carrying capacity map time step simulation. can generate , can generate maps key time steps (least first last) use K_get_interpolation() generate missing ones. choose second option use K_small_changing object comes rangr. can see summary: can see, carrying capacity increases map, meaning environment becoming suitable virtual species. also worth noting first layer K_small_changing K_small. , can visualise input maps using plot function: Input maps raster 3 layers can either run simulation 3 time steps (seems rather pointless) , mentioned, use K_get_interpolation() function generate maps time step. example, 200 time steps need 200 maps. first last layers K_small_changing correspond first last time steps middle layer can assigned time step . addition, give virtual species time adapt new parameters, first carrying capacity maps . done duplicating first layer K_small_changing. Therefore, layers corresponding time points follows: 1st layer K_small_changing - 1st time step, duplicated 1st layer K_small_changing - 20th time step, 2nd layer K_small_changing - 80th time step, 3rd layer K_small_changing - 200th time step. translates stable environment 1-20 time steps, rapidly increasing carrying capacity 20-80 time steps slowly rising carrying capacity 80-200 time steps. Interpolation results completes preparation input maps required example. now select values parameters.","code":"K_small_changing <- rast(system.file(\"input_maps/K_small_changing.tif\",                                       package = \"rangr\")) K_small_changing #> class       : SpatRaster  #> dimensions  : 15, 10, 3  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source      : K_small_changing.tif  #> names       : layer.1, layer.2, layer.3  #> min values  :       0,       0,       0  #> max values  :     100,     130,     170 plot(c(n1_small_02, K_small_changing),      range = range(values(c(n1_small_02, K_small_changing)), na.rm = TRUE),      main = c(\"n1\", paste0(\"K\", 1:nlyr(K_small_changing)))) # duplicate 1st layer of K_small_changing K_small_changing_altered <- c(K_small, K_small_changing)  # interpolate to generate maps for each time step K_small_changing_interpolated <- K_get_interpolation(   K_small_changing_altered,    K_time_points = c(1, 20, 80, 200)) #> Warning in K_check(K_map, K_time_points, time): Argument \"time\" is no specified #> - last number from \"K_time_points\" is used as \"time\" K_small_changing_interpolated #> class       : SpatRaster  #> dimensions  : 15, 10, 200  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : lyr.1, lyr.2, lyr.3, lyr.4, lyr.5, lyr.6, ...  #> min values  :     0,     0,     0,     0,     0,     0, ...  #> max values  :   100,   100,   100,   100,   100,   100, ... # visualise results vis_layers <- c(1, 20, 30, seq(50, 200, by = 20), 200) plot(subset(K_small_changing_interpolated, subset = vis_layers),      range = range(values(K_small_changing_interpolated), na.rm = TRUE),       main = paste0(\"K\", vis_layers), )"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"initialise-using-update-function","dir":"Articles","previous_headings":"More advanced workflow","what":"Initialise (using update function)","title":"How to use rangr?","text":"First, let’s take look sim_data object previous chapter: information input maps, can see list parameters can modified. change following: r - intrinsic growth rate, r_sd - intrinsic growth rate stochasticity, K_sd - environmental stochasticity, growth - growth function virtual species, - strength Allee effect, dens_dep - determines possibility settling particular cell, border - borders treated. change parameters (along carrying capacity map prepared previous section), simply initialise new sim_data object scratch. use update() sim_data previous example demonstrate use. growth virtual species now defined using Ricker function (growth = \"ricker\") increased intrinsic growth rate (r = log(5)) combined weak Allee effect (= 0.2) added demographic stochasticity (r_sd = 0.05). probability settlement target cell determined solely carrying capacity value (dens_dep = \"K\"). also changed parameter dispersal kernel (rate = 1/500) behaviour species near borders - now specimens leave specified study area (border = \"reprising\").","code":"print(sim_data_01) #> Class: sim_data #>  #> n1_map: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> K_map: #> class       : SpatRaster  #> dimensions  : 15, 10, 1  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> name        : layer  #> min value   :     0  #> max value   :   100  #>                              #> resolution              1000 #> r          0.693147180559945 #> r_sd                       0 #> K_sd                       0 #> growth              gompertz #> A                          - #> dens_dep                 K2N #> border             absorbing #> max_dist                2000 #> kernel_fun              rexp #> dlist                   TRUE sim_data_02 <- update(sim_data_01,   n1_map = K_small,   K_map = K_small_changing_interpolated,   K_sd = 1.1,   r = log(5),   r_sd = 0.05,   growth = \"ricker\",   A = 0.2,   dens_dep = \"K\",   border = \"reprising\",   rate = 1 / 500 ) print(sim_data_02) #> Class: sim_data #>  #> n1_map: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   56.00   44.84   72.00  100.00      12  #>  #> K_map: #> class       : SpatRaster  #> dimensions  : 15, 10, 200  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       :    lyr.1,    lyr.2,    lyr.3,    lyr.4,    lyr.5,    lyr.6, ...  #> min values  :  0.00000,   0.0000,   0.0000,   0.0000,   0.0000,   0.0000, ...  #> max values  : 98.97829, 104.7768, 124.1069, 110.6544, 138.7362, 113.8916, ...  #>                            #> resolution            1000 #> r          1.6094379124341 #> r_sd                  0.05 #> K_sd                   1.1 #> growth              ricker #> A                      0.2 #> dens_dep                 K #> border           reprising #> max_dist              1000 #> kernel_fun            rexp #> dlist                 TRUE"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"simulation-1","dir":"Articles","previous_headings":"More advanced workflow","what":"Simulation","title":"How to use rangr?","text":"simulation setup similar previous one. designed way simplify process simulation replication. also now demonstrate parallel computing can used running simulations:  behaviour virtual species created world lives now much complex . result, can better mimic real ecological scenarios users may wish explore. case, observe decrease mean abundance first time steps simulation due change parameters previous simulation. see rapidly increasing trend catch increasing carrying capacity, slows slightly later.","code":"library(parallel) cl <- makeCluster(detectCores() - 2)  sim_result_02 <-    sim(obj = sim_data_02, time = 200, progress_bar = TRUE, cl = cl)  stopCluster(cl) summary(sim_result_02) #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time   200 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   47.00   40.71   72.00  148.00    2400"},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"visualisation-1","dir":"Articles","previous_headings":"More advanced workflow","what":"Visualisation","title":"How to use rangr?","text":"Let’s visualise result simulation. Abundances","code":"plot(sim_result_02,   time_points = c(1, 10, seq(20, 200, by = 20)),   breaks = seq(0, max(sim_result_02$N_map + 5, na.rm = TRUE), by = 20),   template = sim_data_02$K_map ) #> class       : SpatRaster  #> dimensions  : 15, 10, 12  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_10, t_20, t_40, t_60, t_80, ...  #> min values  :   0,    0,    0,    0,    0,    0, ...  #> max values  : 100,   72,   75,   78,  107,  114, ..."},{"path":"https://popecol.github.io/rangr/articles/rangr.html","id":"virtual-ecologist-1","dir":"Articles","previous_headings":"More advanced workflow","what":"Virtual Ecologist","title":"How to use rangr?","text":"present two ways simulate observation process using simulated abundances get_observations() function. first way provide coordinates sample sites time steps observation take place. provided form data.frame three columns: “x”, “y” “time_step”. provided example data frame rangr - used code examples package, create one scratch, one provided considers 100 time steps (200, need now). use observation sites time step. can see data (study site time step) observation made now stored “value” column. Now selected study sites along time steps, can pass data get_observations() function. now demonstrate latest (now) version get_observations() function. designed simulate real monitoring surveys mimicking observation process based statistical properties. Whether survey made observer several years defined geometric distribution (rgeom). study sites available virtual observers passed using cells_coords argument. use sites sampled previous example, stored observations_coords variable, already required format (data.frame ‘x’ ‘y’ columns). can see 62 unique observers made ‘observations’. study site, first observer identifier set “obs1”, second “obs2” . time observer survey site, well probability making observations , defined geometric distribution. can change shape distribution using prob argument. set 0.3 default, now set 0.2 see affects number unique observers. now 45 unique observers, number consecutive years observer stays study site increased.","code":"set.seed(123) str(observations_points) # required structure #> 'data.frame':    1500 obs. of  3 variables: #>  $ x        : int  277500 276500 274500 274500 279500 278500 272500 273500 272500 278500 ... #>  $ y        : int  622500 614500 610500 614500 613500 619500 618500 613500 616500 623500 ... #>  $ time_step: int  1 1 1 1 1 1 1 1 1 1 ...  all_coords <- crds(sim_data_02$K_map) observations_coords <- all_coords[sample(1:nrow(all_coords), 0.1 * nrow(all_coords)),] time_steps <- sim_result_02$simulated_time ncells <- nrow(observations_coords)  points <- data.frame(     x = rep(observations_coords[, \"x\"], times = time_steps),     y = rep(observations_coords[, \"y\"], times = time_steps),     time_step = rep(1:time_steps, each = ncells)   ) str(points) #> 'data.frame':    2600 obs. of  3 variables: #>  $ x        : num  279500 271500 279500 274500 279500 ... #>  $ y        : num  623500 618500 612500 619500 610500 ... #>  $ time_step: int  1 1 1 1 1 1 1 1 1 1 ... set.seed(123)  sample_03 <- get_observations(   sim_data_02,   sim_result_02,   type = \"from_data\",   points = points,   obs_error = \"rlnorm\",   obs_error_param = log(1.2) ) str(sample_03) #> 'data.frame':    2600 obs. of  4 variables: #>  $ x        : num  279500 271500 279500 274500 279500 ... #>  $ y        : num  623500 618500 612500 619500 610500 ... #>  $ time_step: int  1 1 1 1 1 1 1 1 1 1 ... #>  $ value    : num  86.7 53.7 116.9 0 77 ... set.seed(123)  sample_04 <- get_observations(   sim_data_02,   sim_result_02,   type = \"monitoring_based\",   cells_coords = observations_coords,   obs_error = \"rlnorm\",   obs_error_param = log(1.2) ) str(sample_04) #> 'data.frame':    2251 obs. of  5 variables: #>  $ x        : num  279500 279500 279500 279500 279500 ... #>  $ y        : num  623500 623500 623500 623500 623500 ... #>  $ time_step: int  1 2 3 4 5 6 7 8 11 12 ... #>  $ obs_id   : chr  \"obs1\" \"obs1\" \"obs1\" \"obs2\" ... #>  $ value    : num  109.1 79.6 58.5 34.3 48.8 ... length(unique(sample_04$obs_id)) #> [1] 62 set.seed(123)  sample_04 <- get_observations(   sim_data_02,   sim_result_02,   type = \"monitoring_based\",   cells_coords = observations_coords,   obs_error = \"rlnorm\",   obs_error_param = log(1.2),   prob = 0.2 ) str(sample_04) #> 'data.frame':    2454 obs. of  5 variables: #>  $ x        : num  279500 279500 279500 279500 279500 ... #>  $ y        : num  623500 623500 623500 623500 623500 ... #>  $ time_step: int  1 2 3 4 5 6 7 8 9 10 ... #>  $ obs_id   : chr  \"obs1\" \"obs1\" \"obs1\" \"obs1\" ... #>  $ value    : num  116.2 92.7 43.3 32.2 48.4 ... length(unique(sample_04$obs_id)) #> [1] 45"},{"path":"https://popecol.github.io/rangr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Katarzyna Markowska. Author, maintainer. Lechosław Kuczyński. Author. Tad Dallas. Reviewer.            @taddallas Joanne Potts. Reviewer.            @TheAnalyticalEdge","code":""},{"path":"https://popecol.github.io/rangr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Markowska K. Kuczyński L. (2023). rangr: simulating range dynamics virtual species. R package version 0.1.0. https://popecol.github.io/rangr/","code":"@Manual{,   title = {rangr: simulating range dynamics of virtual species},   author = {Katarzyna Markowska and Lechosław Kuczyński},   year = {2023},   note = {R package version 0.1.0},   url = {https://github.com/popecol/rangr}, }"},{"path":"https://popecol.github.io/rangr/index.html","id":"rangr","dir":"","previous_headings":"","what":"Mechanistic Simulation of Species Range Dynamics","title":"Mechanistic Simulation of Species Range Dynamics","text":"rangr package designed simulate species range dynamics. new tool mimics essential processes shape population numbers spatial distribution: local dynamics dispersal. Simulations can run spatially explicit dynamic environment, facilitating population projections response climate land-use changes. using different sampling schemes observational error distributions, structure original survey data can reproduced, pure random sampling can mimicked. study supported National Science Centre, Poland, grant . 2018/29/B/NZ8/00066 Poznań Supercomputing Networking Centre (grant . 403).","code":""},{"path":[]},{"path":"https://popecol.github.io/rangr/index.html","id":"released-version","dir":"","previous_headings":"","what":"Released version","title":"Mechanistic Simulation of Species Range Dynamics","text":"released yet, ’re working .","code":""},{"path":"https://popecol.github.io/rangr/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development version","title":"Mechanistic Simulation of Species Range Dynamics","text":"can install development version GitHub :","code":"devtools::install_github(\"popecol/rangr\")"},{"path":"https://popecol.github.io/rangr/index.html","id":"basic-simulation","dir":"","previous_headings":"","what":"Basic simulation","title":"Mechanistic Simulation of Species Range Dynamics","text":"’s example use rangr package.","code":""},{"path":"https://popecol.github.io/rangr/index.html","id":"input-maps","dir":"","previous_headings":"","what":"Input maps","title":"Mechanistic Simulation of Species Range Dynamics","text":"Example maps available rangr: n1_small.tif n1_big.tif K_small.tif K_small_changing.tif K_big.tif Note input maps must geodetic (.e. Cartesian) coordinate system. can find additional information data sets help files: Two available datasets, n1_small.tif K_small.tif, represent abundance virtual species starting point simulation carrying capacity environment, respectively. objects refer relatively small area, ideal demonstrating usage package. view maps dimensions, can use following commands: can also use plot function terra package visualize maps:","code":"library(rangr)  ?n1_small.tif ?K_small.tif library(terra) #> terra 1.7.55  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <-  rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\")) plot(c(n1_small, K_small))"},{"path":"https://popecol.github.io/rangr/index.html","id":"initialise","dir":"","previous_headings":"","what":"Initialise","title":"Mechanistic Simulation of Species Range Dynamics","text":"create sim_data object containing necessary information run simulation, use initialise() function. example: , set intrinsic population growth rate log(2) rate parameter related kernel function describing dispersal 1/1e3. see summary sim_data object:","code":"sim_data_01 <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) summary(sim_data_01) #> Summary of sim_data object #>  #> n1 map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> Carrying capacity map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   56.00   44.84   72.00  100.00      12  #>                                #> growth                gompertz #> r            0.693147180559945 #> A                            - #> kernel_fun                rexp #> dens_dep                   K2N #> border               absorbing #> max_dist                  2000 #> changing_env             FALSE #> dlist                     TRUE"},{"path":"https://popecol.github.io/rangr/index.html","id":"simulation","dir":"","previous_headings":"","what":"Simulation","title":"Mechanistic Simulation of Species Range Dynamics","text":"run simulation, use sim() function, takes sim_data object specified number time steps input parameters. example: see summary sim_result_01 object:  Note simple example many parameters can set initialise() sim(). See documentation rangr package information.","code":"sim_result_01 <- sim(obj = sim_data_01, time = 100) summary(sim_result_01) #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time   100 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   12.00   10.45   19.00   54.00    1200"},{"path":"https://popecol.github.io/rangr/index.html","id":"visualisation","dir":"","previous_headings":"","what":"Visualisation","title":"Mechanistic Simulation of Species Range Dynamics","text":"can use rangr visualise selected time steps simulation. plot() method used generate plot. ’s example:  can adjust breaks parameter get breaks colorscale:  prefer working raster can also transform sim_result object SpatRaster using to_rast() function: visualise using plot() function:","code":"# generate visualisation plot(sim_result_01,   time_points = c(1, 10, 25, 50),   template = sim_data_01$K_map ) #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_10, t_25, t_50  #> min values  :   0,    0,    0,    0  #> max values  :  10,   19,   27,   36 # generate visualisation with more breaks plot(sim_result_01,   time_points = c(1, 10, 25, 50),   breaks = seq(0, max(sim_result_01$N_map + 5, na.rm = TRUE), by = 5),   template = sim_data_01$K_map ) #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_10, t_25, t_50  #> min values  :   0,    0,    0,    0  #> max values  :  10,   19,   27,   36 # raster construction my_rast <- to_rast(   sim_result_01,   time_points = 1:sim_result_01$simulated_time,   template = sim_data_01$K_map )  # print raster print(my_rast) #> class       : SpatRaster  #> dimensions  : 15, 10, 100  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_2, t_3, t_4, t_5, t_6, ...  #> min values  :   0,   0,   0,   0,   0,   0, ...  #> max values  :  10,  11,  14,  16,  20,  13, ... # plot selected time points plot(my_rast, c(1, 10, 25, 50))"},{"path":"https://popecol.github.io/rangr/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Mechanistic Simulation of Species Range Dynamics","text":"Workflow examples","code":""},{"path":"https://popecol.github.io/rangr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Mechanistic Simulation of Species Range Dynamics","text":"cite rangr use citation() function:","code":"library(rangr) citation(\"rangr\")"},{"path":"https://popecol.github.io/rangr/reference/K_big.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Carrying Capacity Map (Big) — K_big.tif","title":"Example Of Carrying Capacity Map (Big) — K_big.tif","text":"SpatRaster object can used carrying capacity map initialise data necessary perform simulation. map compatible n1_big.tif SpatRaster object can used simulation starting point.","code":""},{"path":"https://popecol.github.io/rangr/reference/K_big.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Carrying Capacity Map (Big) — K_big.tif","text":"SpatRaster object 100 rows 100 columns containing integer values 0-25 NA's (indicates unsuitable areas).","code":""},{"path":"https://popecol.github.io/rangr/reference/K_big.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Carrying Capacity Map (Big) — K_big.tif","text":"Data generated -house serve example (using spatial autocorrelation)","code":""},{"path":"https://popecol.github.io/rangr/reference/K_big.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Of Carrying Capacity Map (Big) — K_big.tif","text":"","code":"system.file(\"input_maps/K_big.tif\", package = \"rangr\") #> [1] \"/home/runner/work/_temp/Library/rangr/input_maps/K_big.tif\""},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"function linearly interpolates values series carrying capacity maps.","code":""},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"","code":"K_get_interpolation(K_map, K_time_points = NULL, time = NULL)"},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"K_map SpatRaster object carrying capacity maps K_time_points K_time_points integer vector; time layer K_map time integer vector length 1; number total time steps required (defined evoking function sim).","code":""},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"SpatRaster object number layers equal time","code":""},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"simulate dynamic environmental scenarios (.e. climate change, land use change, ecological disturbance, etc.) one needs provide time-varying carrying capacity maps. Either K_time_points time parameter needed calculate interpolation. interpolation  calculated two carrying capacity maps, need pass time points, 1 set starting time point time used ending point. hand, absence time argument, last element K_time_points considered ending point interpolation.","code":""},{"path":"https://popecol.github.io/rangr/reference/K_get_interpolation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Time-Varying Carrying Capacity Maps — K_get_interpolation","text":"","code":"if (FALSE) {  # data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small_changing <- rast(system.file(\"input_maps/K_small_changing.tif\", package = \"rangr\"))  K_interpolated_01 <- K_get_interpolation(   K_small_changing,   K_time_points = c(1, 10, 15) )  K_two_layers <- subset(   K_small_changing,   c(1, 2) ) K_interpolated_02 <- K_get_interpolation(   K_two_layers,   time = 15 )  }"},{"path":"https://popecol.github.io/rangr/reference/K_small.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Carrying Capacity Map (Small) — K_small.tif","title":"Example Of Carrying Capacity Map (Small) — K_small.tif","text":"SpatRaster object can used carrying capacity map initialise data necessary perform simulation. map compatible n1_small.tif SpatRaster object can used simulation starting point.","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Carrying Capacity Map (Small) — K_small.tif","text":"SpatRaster object 15 rows 10 columns containing integer values 0-100 NA's (indicates unsuitable areas).","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Carrying Capacity Map (Small) — K_small.tif","text":"Data generated -house serve example (using spatial autocorrelation)","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Of Carrying Capacity Map (Small) — K_small.tif","text":"","code":"system.file(\"input_maps/K_small.tif\", package = \"rangr\") #> [1] \"/home/runner/work/_temp/Library/rangr/input_maps/K_small.tif\""},{"path":"https://popecol.github.io/rangr/reference/K_small_changing.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Changing Carrying Capacity Maps (Small) — K_small_changing.tif","title":"Example Of Changing Carrying Capacity Maps (Small) — K_small_changing.tif","text":"SpatRaster object can used carrying capacity maps initialise data necessary perform simulation. use maps initialise, user first use K_get_interpolation generate map every time step simulation. maps compatible n1_small.tif SpatRaster object can used simulation starting point. subsequent map contains virtual environment greater carrying capacity previous one.","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small_changing.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Changing Carrying Capacity Maps (Small) — K_small_changing.tif","text":"SpatRaster object 3 layers, 15 rows 10 columns containing integer values 0-170 NA's (indicates unsuitable areas).","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small_changing.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Changing Carrying Capacity Maps (Small) — K_small_changing.tif","text":"Data generated -house serve example (using spatial autocorrelation)","code":""},{"path":"https://popecol.github.io/rangr/reference/K_small_changing.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Of Changing Carrying Capacity Maps (Small) — K_small_changing.tif","text":"","code":"system.file(\"input_maps/K_small_changing.tif\", package = \"rangr\") #> [1] \"/home/runner/work/_temp/Library/rangr/input_maps/K_small_changing.tif\""},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulating Dispersal — disp","title":"Simulating Dispersal — disp","text":"function simulates dispersal, every square calculating . individuals disperse square . individuals disperse square.","code":""},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulating Dispersal — disp","text":"","code":"disp(   N_t,   id,   data_table,   kernel,   dens_dep,   dlist,   id_within,   within_mask,   border,   max_dist,   resolution,   ncells_in_circle,   cl = NULL )"},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulating Dispersal — disp","text":"N_t integer matrix population numbers single time step; NA stands cells outside study area id SpatRaster object (size N_t) cell identifiers data_table matrix contains information cells current time points kernel function defining dispersal kernel dens_dep character vector length 1 specifying probability settling target square (case-sensitive, default \"K2N\"): \"none\" - fully random, \"K\" - proportional carrying capacity target square, \"K2N\" - density-dependent, .e. proportional ratio carrying capacity target square number individuals already present target square dlist list identifiers target cells specified distance focal cell id_within integer vector identifiers cells inside study area within_mask logical matrix specifies boundaries study area border character vector length 1 defining deal borders (case-sensitive, default \"absorbing\"): \"absorbing\" - individuals disperse outside study area removed population \"reprising\" - cells outside study area allowed targets dispersal max_dist distance (units used raster id) specifying maximum range identifiers target dispersal cells determined advance (see initialise) resolution integer vector length 1; spatial resolution id raster ncells_in_circle numeric vector; number cells distance cl simulation done parallel, name cluster object created makeCluster","code":""},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulating Dispersal — disp","text":"function returns list contains two matrices: em - emigration matrix number individuals dispersed cell im - immigration matrix number individuals dispersed cell","code":""},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulating Dispersal — disp","text":"function used sim internally intended called user. parameters function passed sim_data object created initialise. Dispersal distance expressed original spatial units SpatRaster provided sim function (n1_map K_map), however, internally converted units simulation (.e. size single cell) calculating round(distance/resolution). Thus, selected dispersal distance smaller resolution/2, effectively means individual disperse, .e. lands cell . dispersal rate (proportion dispersing individuals) can estimated dispersal kernel probability function calculating probability dispersal distance greater resolution/2.","code":""},{"path":"https://popecol.github.io/rangr/reference/disp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulating Dispersal — disp","text":"","code":"# data preparation library(terra) #> terra 1.7.65  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area)  # disp disp_output <- disp(   N_t = sim_data$n1_map,   id = sim_data$id,   data_table = sim_data$data_table,   kernel = sim_data$kernel,   dens_dep = sim_data$dens_dep,   dlist = sim_data$dlist,   id_within = sim_data$id_within,   within_mask = sim_data$within_mask,   border = sim_data$border,   max_dist = sim_data$max_dist,   resolution = sim_data$resolution,   ncells_in_circle = sim_data$ncells_in_circle )  # immigration and emigration matrices names(disp_output) #> [1] \"em\" \"im\""},{"path":"https://popecol.github.io/rangr/reference/get_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Observation Process — get_observations","title":"Observation Process — get_observations","text":"function simulates observation process. takes sim_results object generated sim function uses Virtual Ecologist approach N_map component object. result data.frame \"observed\" abundances returned.","code":""},{"path":"https://popecol.github.io/rangr/reference/get_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observation Process — get_observations","text":"","code":"get_observations(   sim_data,   sim_results,   type = c(\"random_one_layer\", \"random_all_layers\", \"from_data\", \"monitoring_based\"),   obs_error = c(\"rlnorm\", \"rbinom\"),   obs_error_param = NULL,   ... )"},{"path":"https://popecol.github.io/rangr/reference/get_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observation Process — get_observations","text":"sim_data sim_data object initialise containing simulation parameters sim_results sim_results object; returned sim function type character vector length 1; describes sampling type (case-sensitive): \"random_one_layer\" - cells population numbers sampled selected randomly; selected cells time steps \"random_all_layers\" - cells abundance sampled selected randomly; new set cells selected time step \"from_data\" - cells abundance sampled provided user data.frame three columns: \"x\", \"y\" \"time_step\" \"monitoring_based\" - cells abundance sampled provided user matrix object two columns: “x” “y”; abundance given cell sampled different virtual observers different time steps; whether survey made observer several years whether made defined using geometric distribution (rgeom) obs_error character vector length 1; name distribution defining observation process: \"rlnorm\" (log normal distribution) \"rbinom\" (binomial distribution) obs_error_param numeric vector length 1; standard deviation (log scale) random noise observation process generated log-normal distribution (rlnorm) probability detection (success) binomial distribution (\"rbinom\") used ... necessary internal parameters: propnumeric vector length 1; proportion cells sampled (default prop = 0.1); used type = \"random_one_layer\" \"random_all_layers\", pointsdata.frame matrix 3 named numeric columns (\"x\", \"y\" \"time_step\") containing coordinates time steps observations obtained; used type = \"from_data\", cells_coordsdata.frame matrix 2 named columns: \"x\" \"y\"; survey plots coordinates; used type = \"monitoring_based\" probnumeric vector length 1; parameter defining shape - rgeom distribution - defines whether observation made observer several years whether made (default prob = 0.3); used type = \"monitoring_based\" progress_barlogical vector length 1; determines progress bar observational process displayed (default progress_bar = FALSE); used type = \"monitoring_based\"","code":""},{"path":"https://popecol.github.io/rangr/reference/get_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observation Process — get_observations","text":"data.frame object geographic coordinates, time steps, estimated abundances, including observation error (obs_error_param provided) observer identifiers (type = \"monitoring_based\")","code":""},{"path":"https://popecol.github.io/rangr/reference/get_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observation Process — get_observations","text":"","code":"if (FALSE) {  library(terra) n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  # prepare data sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 )  sim_1 <- sim(obj = sim_data, time = 110, burn = 10)  # 1. random_one_layer sample1 <- get_observations(   sim_data,   sim_1,   type = \"random_one_layer\",   prop = 0.1 )  # 2. random_all_layers sample2 <- get_observations(   sim_data,   sim_1,   type = \"random_all_layers\",   prop = 0.15 )  # 3. from_data sample3 <- get_observations(   sim_data,   sim_1,   type = \"from_data\",   points = observations_points )  # 4. monitoring_based # define observations sites all_points <- xyFromCell(sim_data$id, cells(sim_data$K_map)) sample_idx <- sample(1:nrow(all_points), size = 20) sample_points <- all_points[sample_idx, ]  sample4 <- get_observations(   sim_data,   sim_1,   type = \"monitoring_based\",   cells_coords = sample_points,   prob = 0.3,   progress_bar = TRUE )  # 5. noise \"rlnorm\" sample5 <- get_observations(sim_data,   sim_1,   type = \"random_one_layer\",   obs_error = \"rlnorm\",   obs_error_param = log(1.2) )  # 6. noise \"rbinom\" sample6 <- get_observations(sim_data,   sim_1,   type = \"random_one_layer\",   obs_error = \"rbinom\",   obs_error_param = 0.8 )  }"},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Population Growth Functions — growth","title":"Population Growth Functions — growth","text":"Population growth functions can used simulation conducted sim. user needs specify name growth function initialising sim_data object using initialise.","code":""},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population Growth Functions — growth","text":"","code":"exponential(x, r, ...)  ricker(x, r, K, A = NA)  gompertz(x, r, K, A = NA)"},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Population Growth Functions — growth","text":"x number individuals r intrinsic population growth rate ... used, added compatibility reasons K carrying capacity coefficient Allee effect (<= 0: weak, > 0: strong, NA: none)","code":""},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Population Growth Functions — growth","text":"Object dimensions x containing expected number individuals next time step.","code":""},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Population Growth Functions — growth","text":"x can vector, matrix, SpatRaster R object basic arithmetic operations make sense. functions intended used sim function x matrix dimensions SpatRaster object specified n1_map parameter.","code":""},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Population Growth Functions — growth","text":"Boukal, D. S., & Berec, L. (2002). Single-species models Allee effect: extinction boundaries, sex ratios mate encounters. Journal Theoretical Biology, 218(3), 375-394. https://doi.org/10.1006/jtbi.2002.3084","code":""},{"path":"https://popecol.github.io/rangr/reference/growth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Population Growth Functions — growth","text":"","code":"x <- 1:10 exponential(x, r = 0.4) #>  [1]  1.491825  2.983649  4.475474  5.967299  7.459123  8.950948 10.442773 #>  [8] 11.934598 13.426422 14.918247  ricker(x, r = 2, K = 5) #>  [1] 4.953032 6.640234 6.676623 5.967299 5.000000 4.021920 3.145303 2.409554 #>  [9] 1.817069 1.353353 ricker(x, r = 2, K = 5, A = -5) #>  [1]  6.82095847 10.73111194 10.78991918  8.21773284  5.00000000  2.48869747 #>  [7]  1.02624873  0.35325735  0.10200072  0.02478752  gompertz(x, r = 1.2, K = 5) #>  [1] 2.087102 3.181557 3.936002 4.519499 5.000000 5.411464 5.773278 6.097557 #>  [9] 6.392388 6.663442 gompertz(x, r = 1.2, K = 5, A = 5) #>  [1] 0.5550921 1.5137850 2.6912102 3.9034978 5.0000000 5.8773825 6.4807880 #>  [8] 6.7971920 6.8450876 6.6634415"},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Data Required To Perform A Simulation — initialise","title":"Prepare Data Required To Perform A Simulation — initialise","text":"function generates sim_data object contains necessary information needed run simulation sim function. Note input maps (n1_map K_map) must Cartesian coordinate system.","code":""},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Data Required To Perform A Simulation — initialise","text":"","code":"initialise(   n1_map,   K_map,   K_sd = 0,   r,   r_sd = 0,   growth = \"gompertz\",   A = NA,   dens_dep = c(\"K2N\", \"K\", \"none\"),   border = c(\"absorbing\", \"reprising\"),   kernel_fun = \"rexp\",   ...,   max_dist = NA,   calculate_dist = TRUE,   dlist = NULL,   progress_bar = FALSE,   quiet = TRUE,   cl = NULL )  initialize(   n1_map,   K_map,   K_sd = 0,   r,   r_sd = 0,   growth = \"gompertz\",   A = NA,   dens_dep = c(\"K2N\", \"K\", \"none\"),   border = c(\"absorbing\", \"reprising\"),   kernel_fun = \"rexp\",   ...,   max_dist = NA,   calculate_dist = TRUE,   dlist = NULL,   progress_bar = FALSE,   quiet = TRUE,   cl = NULL )"},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Data Required To Perform A Simulation — initialise","text":"n1_map SpatRaster object one layer; population numbers every square first time step K_map SpatRaster object one layer; carrying capacity map (K constant across time) maps (K time-varying) K_sd numeric vector length 1 value >= 0 (default 0); parameter can used additional environmental stochasticity required; K_sd > 0, random numbers generated log-normal distribution mean K_map standard deviation K_sd r numeric vector length 1; intrinsic population growth rate r_sd numeric vector length 1 value >= 0 (default 0); additional demographic stochasticity required, r_sd > 0 standard deviation normal distribution around r (defined time step) growth character vector length 1; name population growth function, either defined growth provided user (case-sensitive, default \"gompertz\") numeric vector length 1; strength Allee effect (see growth function) dens_dep character vector length 1 specifying probability settling target square (case-sensitive, default \"K2N\"): \"none\" - fully random, \"K\" - proportional carrying capacity target square, \"K2N\" - density-dependent, .e. proportional ratio carrying capacity target square number individuals already present target square border character vector length 1 defining deal borders (case-sensitive, default \"absorbing\"): \"absorbing\" - individuals disperse outside study area removed population \"reprising\" - cells outside study area allowed targets dispersal kernel_fun character vector length 1; name random number generation function defining dispersal kernel (case-sensitive, default \"rexp\") ... parameters required kernel_fun max_dist numeric vector length 1; maximum distance dispersal pre-calculate target cells calculate_dist logical vector length 1; determines target cells precalculated dlist list; target cells specified distance calculated every cell within study area progress_bar logical vector length 1; determines progress bar calculating distances displayed (used dlist NULL) quiet logical vector length 1; determines messages calculating distances displayed (used dlist NULL) cl cluster object created makeCluster","code":""},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Data Required To Perform A Simulation — initialise","text":"Object class sim_data inherits list. object contains necessary information perform simulation using sim function.","code":""},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Data Required To Perform A Simulation — initialise","text":"time-consuming part computations performed sim function simulation dispersal. speed , list containing indexes target cells specified distance focal cell, calculated advance stored dlist slot. speed things even , calculations can done parallel, providing cluster object created makeCluster specified using cl parameter. parameter max_dist sets maximum distance pre-calculation done. max_dist NULL set 0.9 quantile kernel_fun. NA input maps stands cells outside study area. K_get_interpolation function can used prepare K_map changes time. may useful, simulating environmental change exploring effects ecological disturbances.","code":""},{"path":"https://popecol.github.io/rangr/reference/initialise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Data Required To Perform A Simulation — initialise","text":"","code":"if (FALSE) {  # input maps library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\")) K_small_changing <- rast(system.file(\"input_maps/K_small_changing.tif\",                          package = \"rangr\"))  # basic example sim_data_1 <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 )  # example with changing environment K_interpolated <- K_get_interpolation(   K_small_changing,   K_time_points = c(1, 25, 50) )  sim_data_2 <- initialise(   n1_map = n1_small,   K_map = K_interpolated,   r = log(2),   rate = 1 / 1e3 )  # example with progress bar sim_data_3 <- initialise(   n1_map = n1_small, K_map = K_small, K_sd = 5, r = log(5),   r_sd = 4, growth = \"ricker\", rate = 1 / 200,   max_dist = 5000, dens_dep = \"K2N\", progress_bar = TRUE )  # example with parallelization library(parallel) cl <- makeCluster(detectCores())  sim_data_4 <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3,   cl = cl,   progress_bar = TRUE ) stopCluster(cl) }"},{"path":"https://popecol.github.io/rangr/reference/n1_big.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Abundance Map At First Time Step Of The Simulation (Big) — n1_big.tif","title":"Example Of Abundance Map At First Time Step Of The Simulation (Big) — n1_big.tif","text":"SpatRaster object can used simulation starting point initialise data necessary perform simulation. map compatible K_big.tif map.","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_big.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Abundance Map At First Time Step Of The Simulation (Big) — n1_big.tif","text":"SpatRaster object 100 rows 100 columns containing integer values 0-50 NA's (indicates unsuitable areas).","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_big.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Abundance Map At First Time Step Of The Simulation (Big) — n1_big.tif","text":"Data generated -house serve example","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_big.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Of Abundance Map At First Time Step Of The Simulation (Big) — n1_big.tif","text":"","code":"system.file(\"input_maps/n1_big.tif\", package = \"rangr\") #> [1] \"/home/runner/work/_temp/Library/rangr/input_maps/n1_big.tif\""},{"path":"https://popecol.github.io/rangr/reference/n1_small.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Abundance Map At First Time Step Of The Simulation (Small) — n1_small.tif","title":"Example Of Abundance Map At First Time Step Of The Simulation (Small) — n1_small.tif","text":"SpatRaster object can used simulation starting point initialise data necessary perform simulation. map compatible K_small.tif K_small_changing.tif maps.","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_small.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Abundance Map At First Time Step Of The Simulation (Small) — n1_small.tif","text":"SpatRaster object 15 rows 10 columns containing integer values 0-10 NA's (indicates unsuitable areas).","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_small.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Abundance Map At First Time Step Of The Simulation (Small) — n1_small.tif","text":"Data generated -house serve example","code":""},{"path":"https://popecol.github.io/rangr/reference/n1_small.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Of Abundance Map At First Time Step Of The Simulation (Small) — n1_small.tif","text":"","code":"system.file(\"input_maps/n1_small.tif\", package = \"rangr\") #> [1] \"/home/runner/work/_temp/Library/rangr/input_maps/n1_small.tif\""},{"path":"https://popecol.github.io/rangr/reference/observations_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Of Observation Points List — observations_points","title":"Example Of Observation Points List — observations_points","text":"data.frame containing sample input data function get_observations  (type argument set \"from_file\"). data compatible n1_small.tif K_small.tif/K_small_changing.tif maps.","code":""},{"path":"https://popecol.github.io/rangr/reference/observations_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Of Observation Points List — observations_points","text":"","code":"observations_points"},{"path":"https://popecol.github.io/rangr/reference/observations_points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Of Observation Points List — observations_points","text":"data frame 1500 rows 3 variables: x x coordinate y y coordinate time_step time_step abundances observed","code":""},{"path":"https://popecol.github.io/rangr/reference/observations_points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Of Observation Points List — observations_points","text":"Data generated -house serve example","code":""},{"path":"https://popecol.github.io/rangr/reference/plot.sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot sim_results Object — plot.sim_results","title":"Plot sim_results Object — plot.sim_results","text":"Plots abundances obtained simulation.","code":""},{"path":"https://popecol.github.io/rangr/reference/plot.sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot sim_results Object — plot.sim_results","text":"","code":"# S3 method for sim_results plot(x, template = NULL, time_points = NULL, range, type, ...)"},{"path":"https://popecol.github.io/rangr/reference/plot.sim_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot sim_results Object — plot.sim_results","text":"x sim_results object; returned sim template SpatRaster object; can used template create returned object time_points numeric vector; specifies points time plots generated range numeric vector length 2; range values used legend (type = \"continuous\"), default calculated N_map slot sim_result object type character vector length 1; type map: \"continuous\" (default), \"classes\" \"interval\"  (case-sensitive) ... arguments passed terra::plot","code":""},{"path":"https://popecol.github.io/rangr/reference/plot.sim_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot sim_results Object — plot.sim_results","text":"SpatRaster object many layers length time_points parameter","code":""},{"path":"https://popecol.github.io/rangr/reference/plot.sim_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot sim_results Object — plot.sim_results","text":"","code":"library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) sim_res <- sim(sim_data, time = 10) plot(sim_res)  #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 10, 0, 15  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       : t_1, t_4, t_7, t_10  #> min values  :   0,   0,   0,    0  #> max values  :  10,  11,  30,   36   # plot specific area plot(sim_res, xlim = c(4, 10), ylim = c(0, 10))  #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 10, 0, 15  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       : t_1, t_4, t_7, t_10  #> min values  :   0,   0,   0,    0  #> max values  :  10,  11,  30,   36  plot(sim_res, ext = c(4, 10, 0, 10)) #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1, 1  (x, y) #> extent      : 0, 10, 0, 15  (xmin, xmax, ymin, ymax) #> coord. ref. :   #> source(s)   : memory #> names       : t_1, t_4, t_7, t_10  #> min values  :   0,   0,   0,    0  #> max values  :  10,  11,  30,   36  plot(sim_res, template = n1_small, ext = c(274000, 280000, 610000, 620000))  #> class       : SpatRaster  #> dimensions  : 15, 10, 4  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> names       : t_1, t_4, t_7, t_10  #> min values  :   0,   0,   0,    0  #> max values  :  10,  11,  30,   36"},{"path":"https://popecol.github.io/rangr/reference/print.sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print sim_data Object — print.sim_data","title":"Print sim_data Object — print.sim_data","text":"Print sim_data Object","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print sim_data Object — print.sim_data","text":"","code":"# S3 method for sim_data print(x, ...)"},{"path":"https://popecol.github.io/rangr/reference/print.sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print sim_data Object — print.sim_data","text":"x sim_data object; returned initialise function ... arguments passed methods; currently none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print sim_data Object — print.sim_data","text":"sim_data object invisibly returned (x param)","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print sim_data Object — print.sim_data","text":"","code":"library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) print(sim_data) #> Class: sim_data #>  #> n1_map: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> K_map: #> class       : SpatRaster  #> dimensions  : 15, 10, 1  (nrow, ncol, nlyr) #> resolution  : 1000, 1000  (x, y) #> extent      : 270000, 280000, 610000, 625000  (xmin, xmax, ymin, ymax) #> coord. ref. : ETRS89 / Poland CS92  #> source(s)   : memory #> varname     : K_small  #> name        : layer  #> min value   :     0  #> max value   :   100  #>                              #> resolution              1000 #> r          0.693147180559945 #> r_sd                       0 #> K_sd                       0 #> growth              gompertz #> A                          - #> dens_dep                 K2N #> border             absorbing #> max_dist                2000 #> kernel_fun              rexp #> dlist                   TRUE"},{"path":"https://popecol.github.io/rangr/reference/print.sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print sim_results Object — print.sim_results","title":"Print sim_results Object — print.sim_results","text":"Print sim_results Object","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print sim_results Object — print.sim_results","text":"","code":"# S3 method for sim_results print(x, ...)"},{"path":"https://popecol.github.io/rangr/reference/print.sim_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print sim_results Object — print.sim_results","text":"x sim_results object; returned sim function ... arguments passed methods; none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print sim_results Object — print.sim_results","text":"sim_results object invisibly returned (x param)","code":""},{"path":"https://popecol.github.io/rangr/reference/print.sim_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print sim_results Object — print.sim_results","text":"","code":"library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) sim_res <- sim(obj = sim_data, time = 20, burn = 5) print(sim_res) #> Class: sim_results #>  #> N_map:  #> , , 1 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    1    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     1 #> [10,]    0    0    1    1    0    1    0    0    2     1 #> [11,]    0    1    0    1    0    0    0    1    1     2 #> [12,]    0    0    0    1    2    2    5    3    3     4 #> [13,]    0    0    1    1    2    0    5    4    7     3 #> [14,]    0    0    1    1    1    0    0    0    5     2 #> [15,]    0    0    0    0    2    0    3    7    5    25 #>  #> , , 2 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    1    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    1    0    0    2     1 #> [10,]    0    0    0    2    0    0    0    2    3     1 #> [11,]    0    1    1    0    3    2    0    3    2     3 #> [12,]    0    0    1    0    0    1    3    5    2     7 #> [13,]    0    0    2    1    5    4    4    7    7     4 #> [14,]    0    0    0    2    1    2    0    0    7     6 #> [15,]    0    0    0    0    1    2    3    6    7    21 #>  #> , , 3 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    1    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    1    0    0    1    0    0    0     0 #>  [8,]    0    0    0    0    1    0    1    0    0     0 #>  [9,]    0    0    0    1    1    3    0    0    1     3 #> [10,]    0    0    2    2    1    1    0    6    3     2 #> [11,]    2    1    2    0    0    5    0    3    4     6 #> [12,]    0    0    3    2    3    4    6    3    5     3 #> [13,]    0    0    4    0    3    5    8    5    6    10 #> [14,]    0    0    0    2    4    6    0    0   11     9 #> [15,]    0    0    0    2    4    5    4    5   10    18 #>  #> , , 4 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    2    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    1    0    0    2    1    0    0     0 #>  [8,]    0    0    0    0    0    3    2    0    0     0 #>  [9,]    0    0    2    2    1    1    0    0    4     3 #> [10,]    0    1    4    2    5    1    0    7    6     3 #> [11,]    2    0    1    2    3    2    0    4    6    13 #> [12,]    0    0    3    0    4    7    3    2    9    12 #> [13,]    0    0    2    3    4    7    5   11   10    13 #> [14,]    0    0    3    4    5    5    0    0    9    14 #> [15,]    0    1    1    4    6    7    5    6   15    14 #>  #> , , 5 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    2    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    1    0    0    3    2    0    0     0 #>  [8,]    0    0    4    1    3    5    5    0    0     0 #>  [9,]    2    1    0    0    3    3    0    0    4     6 #> [10,]    0    5    4    8    4    4    0    9    5     8 #> [11,]    3    3    3    0    6    5    0    4    5    18 #> [12,]    0    0    2    9    5    3    5    8   13    15 #> [13,]    0    0    4    4    7    8    4   11   11    14 #> [14,]    0    0    4    5    5   10    0    0   10    16 #> [15,]    0    2    3    8    9    7    9   11    9    14 #>  #> , , 6 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [5,]    0    1    0    0    1    0    0    0    0     0 #>  [6,]    2    2    2    0    0    0    0    0    0     0 #>  [7,]    1    2    3    0    0    4    4    0    0     0 #>  [8,]    0    0    1    3    5    6    5    0    0     0 #>  [9,]    2    2    3    6    5    3    0    0    7     7 #> [10,]    3    0    4   10    0    2    0    8    7     9 #> [11,]    6    3    4   10    8    6    0    7   11    15 #> [12,]    0    0    3   10    7    8    5    9   12    10 #> [13,]    0    0    2    6    6   12   10    8   11    13 #> [14,]    0    0    9   11    8    9    0    0   12    19 #> [15,]    0    2    8   11   14    9    7   10   11    16 #>  #> , , 7 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    2    1    0    0    0    0     0 #>  [5,]    1    2    3    2    1    0    0    0    0     0 #>  [6,]    1    1    3    0    0    0    0    0    0     0 #>  [7,]    0    2    4    0    0    7    3    0    0     0 #>  [8,]    1    6    7    3    3    4    3    0    0     0 #>  [9,]    4    4    4    3    8    6    0    0    8    11 #> [10,]    3    8    6   10   15    7    0    9    6    13 #> [11,]    5    4    4    8    5   11    0   11   12    18 #> [12,]    0    0    5   10   12    8    5    9    9    14 #> [13,]    0    0    9    7   10   13   12   12   16     9 #> [14,]    0    0   10   14    8    6    0    0   10    22 #> [15,]    0    4   12    9   13    7    7   11   10    15 #>  #> , , 8 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    2    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    5    2    0    0    0    0     0 #>  [5,]    2    5    1    3    5    0    0    0    0     0 #>  [6,]    1    6    3    0    0    0    0    0    0     0 #>  [7,]    2    3    3    0    0    6    5    0    0     0 #>  [8,]    4    6    5    6    7   13    6    0    0     0 #>  [9,]    5    5   10   10    7    6    0    0    8    12 #> [10,]    7    4    8    9   12    7    0   10   12    13 #> [11,]    7    7    5   13   14   10    0    9   19    21 #> [12,]    0    0    6    7   10   13   12    8   17    17 #> [13,]    0    0    9    9   11   12   13    9   14    17 #> [14,]    0    0   12    6   12   12    0    0   15    24 #> [15,]    0    5   15   19   14    9   12   13    9    18 #>  #> , , 9 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    1    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    4    0    0    0    0    0     0 #>  [4,]   NA   NA   NA    2    5    0    0    0    0     0 #>  [5,]    8    6    6    2    5    0    0    0    0     0 #>  [6,]    1    7    6    0    0    0    0    0    0     0 #>  [7,]    5    6    4    0    0    9    7    0    0     0 #>  [8,]    6    6    9    8   11   14    8    0    0     0 #>  [9,]    8    8    9   12   12    9    0    0   11    10 #> [10,]    9    7   14   12   14    9    0   12   10    15 #> [11,]    6   11    4   12   17   14    0   14   18    18 #> [12,]    0    0   10   11   19   12   10   14   21    27 #> [13,]    0    0    8   13   16   13   16   19   11    19 #> [14,]    0    0   11   10   16   13    0    0   17    26 #> [15,]    0   11   14   14   18   11   16    9   13    21 #>  #> , , 10 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     0 #>  [3,]   NA   NA   NA    5    0    0    2    0    0     0 #>  [4,]   NA   NA   NA    7    1    0    0    0    0     0 #>  [5,]    7    9    3    2    7    0    0    0    0     0 #>  [6,]    5    7    9    0    0    0    0    0    0     0 #>  [7,]    3    6    8    0    0   15   11    0    0     0 #>  [8,]    8   12   10    8   16   13   13    0    0     0 #>  [9,]    9    9   14   12   13   11    0    0   15    15 #> [10,]    8   10   11   13   13   12    0   21   12    13 #> [11,]    8    9   14   13   16   15    0   15   15    19 #> [12,]    0    0   11   13   13   15   10   19   24    29 #> [13,]    0    0   14   17   14   13   14   15   16    17 #> [14,]    0    0   12   18   13    7    0    0   21    25 #> [15,]    0   11   11   17   18   15   19   12   18    22 #>  #> , , 11 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    1    0    0    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     1 #>  [3,]   NA   NA   NA    7    0    0    3    0    0     0 #>  [4,]   NA   NA   NA    9    5    0    0    0    0     0 #>  [5,]    9   11    8    5    7    0    0    0    0     0 #>  [6,]    5    4    8    0    0    0    0    0    0     0 #>  [7,]    5    8    9    0    0   14    7    0    0     0 #>  [8,]   12   18   10   13   16   10   13    0    0     0 #>  [9,]   19    7   20    7   14   15    0    0   17    21 #> [10,]   11   10   14   20    9   13    0   18   13    17 #> [11,]   13   14    9   15   17   19    0   13   18    25 #> [12,]    0    0    8   14   14   14   10   15   11    20 #> [13,]    0    0   13   16   16   19   17   11   14    17 #> [14,]    0    0   13   16   16   12    0    0   19    22 #> [15,]    0   11   15   21   16   17   11   13   17    23 #>  #> , , 12 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    1    1    1    0    0     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     3 #>  [3,]   NA   NA   NA    6    0    0    6    0    0     0 #>  [4,]   NA   NA   NA    7    7    0    0    0    0     0 #>  [5,]   14   11   11    8    8    0    0    0    0     0 #>  [6,]   13    6    8    0    0    0    0    0    0     0 #>  [7,]    9    8   11    0    0   12   11    0    0     0 #>  [8,]   18   12   11   12   13   12   14    0    0     0 #>  [9,]   20   16   11   13   14   18    0    0   12    24 #> [10,]   15    9   13   14   16    9    0   18   18    14 #> [11,]   15   17   12   19   14   17    0   18   16    21 #> [12,]    0    0   11   16   17   18   15   16   12    14 #> [13,]    0    0   12   18   19   14   16   21   12    20 #> [14,]    0    0   16   16   18   19    0    0   16    23 #> [15,]    0   11   18   28   15   12    8   14   16    20 #>  #> , , 13 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    3    1    3    1    3     0 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     3 #>  [3,]   NA   NA   NA   10    0    0    7    0    0     0 #>  [4,]   NA   NA   NA    7    7    0    0    0    0     0 #>  [5,]   10   13   14   15   14    0    0    0    0     0 #>  [6,]   13   13   12    0    0    0    0    0    0     0 #>  [7,]   16   13   12    0    0    5    7    0    0     0 #>  [8,]   14   15   13   14   12   14   18    0    0     0 #>  [9,]   13   19   16   11   19   16    0    0    9    21 #> [10,]   14   10   19   15   14   11    0   12   13    15 #> [11,]   14   15   15   21   17   13    0   16   16    20 #> [12,]    0    0   14   17   18   20   16   19   14    15 #> [13,]    0    0   18   23   18   14   18   16   17    28 #> [14,]    0    0   12   16   25   20    0    0   19    25 #> [15,]    0   12   17   28   13   21   15   14   16    22 #>  #> , , 14 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    8    6    6    2    4     1 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     1 #>  [3,]   NA   NA   NA   10    0    0    9    0    0     0 #>  [4,]   NA   NA   NA   12   14    0    0    0    0     0 #>  [5,]   18   11   17   15   13    0    0    0    0     0 #>  [6,]   15   13   14    0    0    0    0    0    0     0 #>  [7,]    7   12   15    0    0   14    9    0    0     0 #>  [8,]   21   20   15    8   13    9   11    0    0     0 #>  [9,]   14   11   13   18   18   12    0    0   13    17 #> [10,]   16   13   17   13   19   17    0   14   18    16 #> [11,]   18   15   14   27   19   18    0   19   18    12 #> [12,]    0    0   17   11   21   15   16   16   19    13 #> [13,]    0    0   14   18   18   20   21   12   19    19 #> [14,]    0    0   13   14   20   21    0    0   19    20 #> [15,]    0   12   17   20   16   17   14   14   18    29 #>  #> , , 15 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   NA   NA   NA    0    9    7    9    4    6     4 #>  [2,]   NA   NA   NA    0    0    0    0    0    0     4 #>  [3,]   NA   NA   NA    8    0    0    8    0    0     0 #>  [4,]   NA   NA   NA   13   14    0    0    0    0     0 #>  [5,]   20   11   13   11   13    0    0    0    0     0 #>  [6,]   14   12   18    0    0    0    0    0    0     0 #>  [7,]    9   13    9    0    0    7   12    0    0     0 #>  [8,]   24   23   18   16   13   12   18    0    0     0 #>  [9,]   20   13   19   15   18   15    0    0   11    13 #> [10,]   14   11   14   21   19   12    0   17   22    19 #> [11,]   15   17   12   19   17   16    0   19   17    22 #> [12,]    0    0   18   14   23   15   14   15   16    17 #> [13,]    0    0   18   17   18   12   27   14   21    24 #> [14,]    0    0   15   21   20   17    0    0   24    20 #> [15,]    0   10   12   21   27   16   17   13   21    33 #>  #>                            #> simulated time steps    15 #> extinction           FALSE"},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary.sim_data Object — print.summary.sim_data","title":"Print summary.sim_data Object — print.summary.sim_data","text":"Print summary.sim_data Object","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary.sim_data Object — print.summary.sim_data","text":"","code":"# S3 method for summary.sim_data print(x, ...)"},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary.sim_data Object — print.summary.sim_data","text":"x summary.sim_data object; returned summary.sim_data function ... arguments passed methods; currently none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary.sim_data Object — print.summary.sim_data","text":"None","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary.sim_data Object — print.summary.sim_data","text":"","code":"# data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) summary_sim_data <- summary(sim_data) print(summary_sim_data) #> Summary of sim_data object #>  #> n1 map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> Carrying capacity map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   56.00   44.84   72.00  100.00      12  #>                                #> growth                gompertz #> r            0.693147180559945 #> A                            - #> kernel_fun                rexp #> dens_dep                   K2N #> border               absorbing #> max_dist                  2000 #> changing_env             FALSE #> dlist                     TRUE"},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary.sim_results Object — print.summary.sim_results","title":"Print summary.sim_results Object — print.summary.sim_results","text":"Print summary.sim_results Object","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary.sim_results Object — print.summary.sim_results","text":"","code":"# S3 method for summary.sim_results print(x, ...)"},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary.sim_results Object — print.summary.sim_results","text":"x summary.sim_results object; returned summary.sim_results function ... arguments passed methods; currently none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary.sim_results Object — print.summary.sim_results","text":"None","code":""},{"path":"https://popecol.github.io/rangr/reference/print.summary.sim_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary.sim_results Object — print.summary.sim_results","text":"","code":"# data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) sim_results <- sim(sim_data, time = 10) summary_sim_results <- summary(sim_results)  print(summary_sim_results) #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time    10 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.9993  0.0000 18.0000     120"},{"path":"https://popecol.github.io/rangr/reference/rangr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rangr: Mechanistic Simulation of Species Range Dynamics — rangr-package","title":"rangr: Mechanistic Simulation of Species Range Dynamics — rangr-package","text":"Species range dynamics simulation toolset.","code":""},{"path":[]},{"path":"https://popecol.github.io/rangr/reference/rangr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rangr: Mechanistic Simulation of Species Range Dynamics — rangr-package","text":"Maintainer: Katarzyna Markowska katarzyna.markowska@amu.edu.pl Authors: Lechosław Kuczyński lechu@amu.edu.pl contributors: Tad Dallas (@taddallas) [reviewer] Joanne Potts (@TheAnalyticalEdge) [reviewer]","code":""},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Mechanistic Metapopulation Simulator — sim","title":"Mechanistic Metapopulation Simulator — sim","text":"function simulates population growth dispersal providing given environmental scenario. parameters simulation must set advance using initialise.","code":""},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mechanistic Metapopulation Simulator — sim","text":"","code":"sim(   obj,   time,   burn = 0,   cl = NULL,   progress_bar = FALSE,   quiet = TRUE )"},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mechanistic Metapopulation Simulator — sim","text":"obj sim_data object created initialise containing simulation parameters necessary data time positive integer vector length 1; number time steps simulated burn positive integer vector length 1; number burn-time steps discarded output cl optional cluster object created makeCluster needed parallel calculations progress_bar logical vector length 1 determines progress bar simulation displayed quiet logical vector length 1; determines warnings displayed","code":""},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mechanistic Metapopulation Simulator — sim","text":"function returns object class sim_results list containing following components: extinction - TRUE population extinct FALSE otherwise simulated_time - number simulated time steps without burn-ones N_map - 3-dimensional array representing spatio-temporal variability population numbers. first two dimensions correspond spatial aspect output third dimension represents time. case total extinction, simulation stopped reaching specified . time steps. population died reaching burn threshold, nothing can returned error occurs.","code":""},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mechanistic Metapopulation Simulator — sim","text":"main simulation module. takes sim_data object prepared initialise runs simulation given number time steps. initial (specified burn parameter) time steps skipped discarded output. Computations can done parallel name cluster created makeCluster provided. Generally, time step, simulation consists two phases: local dynamics dispersal. Local dynamics (connects habitat patches time) defined function growth. parameter specified creating obj using initialise, can later modified using update function. Population growth can either exponential density-dependent, regulation implemented use Gompertz Ricker models (possibility providing , user defined function). every cell, expected population density next time step calculated corresponding number individuals currently present cell, actual number individuals set drawing random number Poisson distribution using expected value. procedure introduces realistic randomness, however additional levels random variability can incorporated providing parameters demographic environmental stochasticity specifying sim_data object using initialise function (parameters r_sd K_sd, respectively). simulate dispersal (connects habitat patches space), individual given cell, dispersal distance randomly drawn dispersal kernel density function. , individual translocated randomly chosen cell distance apart current location. details, see disp function.","code":""},{"path":"https://popecol.github.io/rangr/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mechanistic Metapopulation Simulator — sim","text":"","code":"if (FALSE) {  # data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 )  # simulation sim_1 <- sim(obj = sim_data, time = 100)  # simulation with burned time steps and progress bar sim_2 <- sim(obj = sim_data, time = 100, burn = 20, progress_bar = TRUE)  # example with parallelization library(parallel) cl <- makeCluster(detectCores())  # parallelized simulation sim_3 <- sim(obj = sim_data, time = 100, cl = cl, progress_bar = TRUE) stopCluster(cl)   # visualisation plot(n1_small)  plot(to_rast(   sim_1,   time_points = 100,   template = sim_data$K_map ))  plot(to_rast(   sim_1,   time_points = c(1, 10, 50, 100),   template = sim_data$K_map ), range = range(sim_1$N_map, na.rm = TRUE))  }"},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"Subset Given Time Points sim_results Object","code":""},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"","code":"# S3 method for sim_results subset(x, from = NULL, time_points = NULL, ...)"},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"x sim_results object; returned sim function numeric vector length 1; indicates starting time point time point kept time_points numeric vector; indicates time points keep ... arguments passed methods","code":""},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"sim_results object selected time_points present N_map slot","code":""},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"Either time_points argument specified. Time point passed argument set cutoff point abundances previous time points discarded.","code":""},{"path":"https://popecol.github.io/rangr/reference/subset.sim_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset Of The Given Time Points From sim_results Object — subset.sim_results","text":"","code":"# data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n = n1_small,   r = log(2),   K_map = K_small,   max_dist = 1000,   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area)  sim_results <- sim(sim_data, time = 10) summary(sim_results)  #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time    10 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.7725  0.0000 25.0000     120   sim_results_cropped <- subset(sim_results, time_points = c(1:2)) summary(sim_results_cropped)  #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time     2 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1413  0.0000 11.0000      24"},{"path":"https://popecol.github.io/rangr/reference/summary.sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Of sim_data Object — summary.sim_data","title":"Summary Of sim_data Object — summary.sim_data","text":"Summary sim_data Object","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Of sim_data Object — summary.sim_data","text":"","code":"# S3 method for sim_data summary(object, ...)"},{"path":"https://popecol.github.io/rangr/reference/summary.sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Of sim_data Object — summary.sim_data","text":"object sim_data object; returned initialise function ... arguments passed methods; currently none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Of sim_data Object — summary.sim_data","text":"summary.sim_data object","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Of sim_data Object — summary.sim_data","text":"","code":"# data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area) summary(sim_data) #> Summary of sim_data object #>  #> n1 map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.1449  0.0000 10.0000      12  #>  #> Carrying capacity map summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00    0.00   56.00   44.84   72.00  100.00      12  #>                                #> growth                gompertz #> r            0.693147180559945 #> A                            - #> kernel_fun                rexp #> dens_dep                   K2N #> border               absorbing #> max_dist                  2000 #> changing_env             FALSE #> dlist                     TRUE"},{"path":"https://popecol.github.io/rangr/reference/summary.sim_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Of sim_results Object — summary.sim_results","title":"Summary Of sim_results Object — summary.sim_results","text":"Summary sim_results Object","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Of sim_results Object — summary.sim_results","text":"","code":"# S3 method for sim_results summary(object, ...)"},{"path":"https://popecol.github.io/rangr/reference/summary.sim_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Of sim_results Object — summary.sim_results","text":"object sim_results object; returned sim function ... arguments passed methods; none specified","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Of sim_results Object — summary.sim_results","text":"summary.sim_results object","code":""},{"path":"https://popecol.github.io/rangr/reference/summary.sim_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Of sim_results Object — summary.sim_results","text":"","code":"# data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) #> NaN values were found in input maps and replaced with NA (cells outside the study area)  # simulation sim_results <- sim(sim_data, time = 10) summary(sim_results)  #> Summary of sim_results object #>  #> Simulation summary:  #>                      #> simulated time    10 #> extinction     FALSE #>  #> Abundances summary:  #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>  0.0000  0.0000  0.0000  0.8442  0.0000 29.0000     120"},{"path":"https://popecol.github.io/rangr/reference/to_rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Transformation sim_results To Raster — to_rast","title":"Transformation sim_results To Raster — to_rast","text":"function transforms selected subset abundance matrices sim_results SpatRaster object. Layers specified time_points can one point time many.","code":""},{"path":"https://popecol.github.io/rangr/reference/to_rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transformation sim_results To Raster — to_rast","text":"","code":"to_rast(sim_results, time_points = sim_results$simulated_time, template = NULL)"},{"path":"https://popecol.github.io/rangr/reference/to_rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transformation sim_results To Raster — to_rast","text":"sim_results sim_results object created sim time_points numeric vector length 1 ; specifies points time SpatRaster created default last year simulation; length(time_points) > 0 SpatRaster returned layers element time_points template SpatRaster object; can used template create returned object","code":""},{"path":"https://popecol.github.io/rangr/reference/to_rast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transformation sim_results To Raster — to_rast","text":"SpatRaster based sim_results object layers corresponding time_points","code":""},{"path":"https://popecol.github.io/rangr/reference/to_rast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transformation sim_results To Raster — to_rast","text":"","code":"if (FALSE) {  # data preparation library(terra)  n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 )  # simulation sim_1 <- sim(obj = sim_data, time = 100)  # raster construction my_rast <- to_rast(   sim_1,   time_points = c(1, 10, 20, 100),   template = sim_data$K_map )  # visualization plot(my_rast, range = range(sim_1$N_map, na.rm = TRUE))  }"},{"path":"https://popecol.github.io/rangr/reference/update.sim_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Update sim_data Object — update.sim_data","title":"Update sim_data Object — update.sim_data","text":"Update sim_data Object","code":""},{"path":"https://popecol.github.io/rangr/reference/update.sim_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update sim_data Object — update.sim_data","text":"","code":"# S3 method for sim_data update(object, ..., evaluate = TRUE)"},{"path":"https://popecol.github.io/rangr/reference/update.sim_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update sim_data Object — update.sim_data","text":"object sim_data object; returned initialise function ... arguments passed methods; currently none specified evaluate logical vector length 1 TRUE evaluate new call else return call","code":""},{"path":"https://popecol.github.io/rangr/reference/update.sim_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update sim_data Object — update.sim_data","text":"evaluate = TRUE updated sim_data object, otherwise updated call.","code":""},{"path":"https://popecol.github.io/rangr/reference/update.sim_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update sim_data Object — update.sim_data","text":"","code":"if (FALSE) {  # data preparation library(terra) n1_small <- rast(system.file(\"input_maps/n1_small.tif\", package = \"rangr\")) K_small <- rast(system.file(\"input_maps/K_small.tif\", package = \"rangr\"))  sim_data_1 <- initialise(   n1_map = n1_small,   K_map = K_small,   r = log(2),   rate = 1 / 1e3 ) summary(sim_data_1)  sim_data_2 <- update(sim_data_1, max_dist = 3000) summary(sim_data_2)  }"},{"path":[]},{"path":"https://popecol.github.io/rangr/news/index.html","id":"major-improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"Major improvements","title":"rangr 1.0.2 (2024-01-16)","text":"rangr now based terra package Added binomial distribution get_observation() (new distribution defining observation process)","code":""},{"path":"https://popecol.github.io/rangr/news/index.html","id":"minor-improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"rangr 1.0.2 (2024-01-16)","text":"Added default values initialize()’s parameters Improved documentation get_observation() Improved documentation - titles formatting Added examples plot.sim_results()","code":""},{"path":[]},{"path":"https://popecol.github.io/rangr/news/index.html","id":"minor-improvements-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor improvements","title":"rangr 1.0.1 (2023-09-04)","text":"Improved documentation get_observations(). Added functionality description get_observations() vignettes","code":""}]
